# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
import datetime
from urllib.parse import (
    urljoin,
)

from pkg_resources import get_distribution  # from setuptools
import sphinx_autosummary_accessors  # Sphinx extention to format xarray/pandas summaries
from jinja2.defaults import DEFAULT_FILTERS
from IPython import embed  # For debugging

import imaspy

print("python exec:", sys.executable)
print("sys.path:", sys.path)

# -- Project information -----------------------------------------------------

project = "imaspy"
gitlab_group = "imaspy"
copyright = "2016-{!s}, Karel van de Plassche (DIFFER)".format(
    datetime.datetime.now().year
)
author = "Karel van de Plassche (DIFFER)"
src_host = "gitlab.com"
src_owner = "klimex"

# Parse urls here for convenience, to be re-used
# gitlab imaspy folder
repository_url = f"https://{src_host}/{src_owner}/{gitlab_group}/"
blob_url = urljoin(repository_url, "-/blob/master/")
issue_url = urljoin(repository_url, "-/issues/")
mr_url = urljoin(repository_url, "-/merge_requests/")

# JINTRAC docs
jintrac_sphinx = "https://users.euro-fusion.org/pages/data-cmg/wiki/"

# Configuration of sphinx.ext.extlinks
# See https://www.sphinx-doc.org/en/master/usage/extensions/extlinks.html
# unique name: (base URL, label prefix)
extlinks = {
    "src": (blob_url + "%s", f"{src_owner}/{gitlab_group}/"),
    "issue": (issue_url + "%s", "#"),
    "merge": (mr_url + "%s", "!"),
    "jintrac": (jintrac_sphinx + "%s", "jintrac pages ")
}

# The default replacements for |version| and |release|, also used in various
# other places throughout the built documents.
#
# contents of docs/conf.py
# The short X.Y version (including .devXXXX, rcX, b1 suffixes if present)
release = get_distribution(project).version
# The full version, including alpha/beta/rc tags.
version = ".".join(release.split(".")[:2])


# -- General configuration ---------------------------------------------------
# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",  # To auto-generate docs from Python docstrings
    "sphinx.ext.todo",  # nature theme
    "sphinx.ext.githubpages",  # nature theme
    "sphinx.ext.napoleon",  # Support for NumPy and Google style docstrings
    "sphinx.ext.intersphinx",  # Generate links to other documentation files
    #'sphinx.ext.coverage',  # numpy
    #'sphinx.ext.doctest',  # numpy
    "sphinx.ext.autosummary",  # For summarizing autodoc-generated files
    "sphinx.ext.extlinks",  # For shortening internal links
    #'sphinx.ext.graphviz',  # numpy
    #'sphinx.ext.ifconfig',  # numpy
    #'matplotlib.sphinxext.plot_directive',  # numpy
    #'IPython.sphinxext.ipythoGn_console_highlighting',  # numpy
    #'IPython.sphinxext.ipython_directive',  # numpy
    #'sphinx.ext.imgmath',  # numpy
    "recommonmark",  # For markdown support, does not support 'full' CommonMark syntax (yet)!
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates", sphinx_autosummary_accessors.templates_path]

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# The suffix of source filenames.
source_suffix = {
    ".rst": "restructuredtext",
    ".txt": "markdown",
    ".md": "markdown",
}

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
# today = ''
# Else, today_fmt is used as the format for a strftime call.
today_fmt = "%Y-%m-%d"


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = {"logo_only": True}

# Add any paths that contain custom themes here, relative to this directory.
# html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# '<project> v<release> documentation'.
# html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
# html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = "_static/dataset-diagram-logo.png"

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = "_static/favicon.ico"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named 'default.css' will overwrite the builtin 'default.css'.
html_static_path = ["_static"]

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
# html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = today_fmt

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
# html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
# html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
# html_additional_pages = {}

# If false, no module index is generated.
# html_domain_indices = True

# If false, no index is generated.
# html_use_index = True

# If true, the index is split into individual pages for each letter.
# html_split_index = False

# If true, links to the reST sources are added to the pages.
# html_show_sourcelink = True

# If true, 'Created using Sphinx' is shown in the HTML footer. Default is True.
# html_show_sphinx = True

# If true, '(C) Copyright ...' is shown in the HTML footer. Default is True.
# html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
# html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. '.xhtml').
# html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = "xarraydoc"


# -- Extension configuration -------------------------------------------------
from recommonmark.transform import AutoStructify

# app setup hook
# def setup(app):
#    # add a config value for `ifconfig` directives
#    app.add_config_value('python_version_major', str(sys.version_info.major), 'env')
#    app.add_lexer('NumPyC', NumPyLexer)
#    app.add_config_value('recommonmark_config', {
#        #'url_resolver': lambda url: 'http://' + url,#  a function that maps a existing relative position in the document to a http link
#        'enable_auto_toc_tree': True,  # whether enable Auto Toc Tree feature.
#        'auto_toc_tree_section': 'Contents',  # when enabled, Auto Toc Tree will only be enabled on section that matches the title.
#        'enable_math': True,  # whether enable Math Formula
#        'enable_inline_math': True,  # whether enable Inline Math
#        'enable_eval_rst': False,  # whether Embed reStructuredText is enabled.
#        'enable_auto_doc_ref': None,  # Depracated
#    }, True)
#    app.add_transform(AutoStructify)


# Configuration of sphinx.ext.autodoc
# https://www.sphinx-doc.org/en/master/usage/quickstart.html#autodoc
# autodoc_typehints = "none" #xarray

# Configuration of sphinx.ext.autosummary
# https://www.sphinx-doc.org/en/master/usage/extensions/autosummary.html
autosummary_generate = True

# Configuration of recommonmark
# See https://www.sphinx-doc.org/en/master/usage/markdown.html

# Configuration of sphinx.ext.napoleon
# Support for NumPy and Google style docstrings
# See https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html
# napoleon_preprocess_types = True #From xarray, not in docs
napoleon_google_docstring = True
napoleon_numpy_docstring = False
napoleon_include_init_with_doc = True
napoleon_include_private_with_doc = True
napoleon_include_special_with_doc = True
napoleon_type_aliases = {
    # general terms
    "sequence": ":term:`sequence`",
    "iterable": ":term:`iterable`",
    "callable": ":py:func:`callable`",
    "dict_like": ":term:`dict-like <mapping>`",
    "dict-like": ":term:`dict-like <mapping>`",
    "mapping": ":term:`mapping`",
    "file-like": ":term:`file-like <file-like object>`",
    # special terms
    # 'same type as caller': '*same type as caller*',  # does not work, yet
    # 'same type as values': '*same type as values*',  # does not work, yet
    # stdlib type aliases
    "MutableMapping": "~collections.abc.MutableMapping",
    "sys.stdout": ":obj:`sys.stdout`",
    "timedelta": "~datetime.timedelta",
    "string": ":class:`string <str>`",
    # numpy terms
    "array_like": ":term:`array_like`",
    "array-like": ":term:`array-like <array_like>`",
    "scalar": ":term:`scalar`",
    "array": ":term:`array`",
    "hashable": ":term:`hashable <name>`",
    # matplotlib terms
    "color-like": ":py:func:`color-like <matplotlib.colors.is_color_like>`",
    "matplotlib colormap name": ":doc:matplotlib colormap name <Colormap reference>",
    "matplotlib axes object": ":py:class:`matplotlib axes object <matplotlib.axes.Axes>`",
    "colormap": ":py:class:`colormap <matplotlib.colors.Colormap>`",
    # objects without namespace
    "DataArray": "~xarray.DataArray",
    "Dataset": "~xarray.Dataset",
    "Variable": "~xarray.Variable",
    "ndarray": "~numpy.ndarray",
    "MaskedArray": "~numpy.ma.MaskedArray",
    "dtype": "~numpy.dtype",
    "ComplexWarning": "~numpy.ComplexWarning",
    "Index": "~pandas.Index",
    "MultiIndex": "~pandas.MultiIndex",
    "CategoricalIndex": "~pandas.CategoricalIndex",
    "TimedeltaIndex": "~pandas.TimedeltaIndex",
    "DatetimeIndex": "~pandas.DatetimeIndex",
    "Series": "~pandas.Series",
    "DataFrame": "~pandas.DataFrame",
    "Categorical": "~pandas.Categorical",
    "Path": "~~pathlib.Path",
    # objects with abbreviated namespace (from pandas)
    "pd.Index": "~pandas.Index",
    "pd.NaT": "~pandas.NaT",
}  # TODO: From xarray, improve!
# napoleon_use_admonition_for_examples = False # Default
# napoleon_use_admonition_for_notes = False # Default
# napoleon_use_admonition_for_references = False # Default
# napoleon_use_ivar = False # Default
# napoleon_use_param = True # Defalt
# napoleon_use_rtype = True # Default
# napoleon_type_aliases = None # Default

# From xarray, huh?
# numpydoc_class_members_toctree = True
# numpydoc_show_class_members = False

# Configuration of sphinx.ext.intersphinx
# See https://www.sphinx-doc.org/en/master/usage/extensions/intersphinx.html
intersphinx_mapping = {
    "python": ("https://docs.python.org/3/", None),
    "pandas": ("https://pandas.pydata.org/pandas-docs/stable", None),
    "numpy": ("https://numpy.org/doc/stable", None),
    "scipy": ("https://docs.scipy.org/doc/scipy/reference", None),
    "numba": ("https://numba.pydata.org/numba-doc/latest", None),
    "matplotlib": ("https://matplotlib.org", None),
    "dask": ("https://docs.dask.org/en/latest", None),
    #"jintrac": ("https://users.euro-fusion.org/pages/data-cmg/wiki/", None) Behind password, so cannot link there
}


# Set up lexer
#
from pygments.lexers import CLexer
from pygments.lexer import inherit, bygroups
from pygments.token import Comment


class NumPyLexer(CLexer):
    """
    Copyright (c) 2005-2020, NumPy Developers.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

        * Redistributions of source code must retain the above copyright
           notice, this list of conditions and the following disclaimer.

        * Redistributions in binary form must reproduce the above
           copyright notice, this list of conditions and the following
           disclaimer in the documentation and/or other materials provided
           with the distribution.

        * Neither the name of the NumPy Developers nor the names of any
           contributors may be used to endorse or promote products derived
           from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    """

    name = "NUMPYLEXER"

    tokens = {
        "statements": [
            (r"@[a-zA-Z_]*@", Comment.Preproc, "macro"),
            inherit,
        ],
    }


# import glob
# python_files = glob.glob('../../imaspy/**/*.py', recursive=True)
# code_string = ""
# automodule_paths = []
# for file in python_files:
#    if all([iden not in file for iden in ['__pycache__', 'GPR1D']]):
#        automodule_path = file[6:-3].replace('/', '.')
#        automodule_paths.append(automodule_path)
## If you want a big page with all docs
##        automodule_string = """
##.. automodule:: {!s}
##   :members:
##   :show-inheritance:
##
##""".format(automodule_path)
##        code_string += automodule_string
#
# with open('code.rst', 'w') as f_:
#    f_.write(code_string)
#
# toc_string = """
# .. autosummary::
#     :toctree: stubs
#
# """
# for path in automodule_paths:
#    toc_string += '     ' + path + '\n'
#
# with open('code_toc.rst', 'w') as f_:
#    f_.write(toc_string)
def escape_underscores(string):
    return string.replace("_", r"\_")


def setup(app):
    DEFAULT_FILTERS["escape_underscores"] = escape_underscores
