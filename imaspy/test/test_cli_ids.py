from click.testing import CliRunner
import pytest

import imaspy
from imaspy.command.subcommands.ids import info, open_from_file
from imaspy.ids_defs import ASCII_BACKEND, IDS_TIME_MODE_HOMOGENEOUS
from imaspy.test.test_helpers import open_dbentry


@pytest.fixture
def filled_ascii_datastore(tmp_path, ids_minimal_types, worker_id, requires_imas):
    shot = 1 if worker_id == "master" else int(worker_id[2:]) + 1
    filename = f"test_{shot}_0_minimal.ids"  # Generated by open_dbentry
    dbentry = open_dbentry(
        ASCII_BACKEND, "w", worker_id, tmp_path, xml_path=ids_minimal_types
    )
    minimal = dbentry.factory.new("minimal")
    minimal["int_type"] = 99
    minimal.ids_properties.homogeneous_time = IDS_TIME_MODE_HOMOGENEOUS
    dbentry.put(minimal)
    dbentry.close()
    yield tmp_path, filename, ids_minimal_types, worker_id


@pytest.mark.skip(reason="Functionality is broken")
@pytest.mark.cli
def test_ids_info(filled_ascii_datastore):
    tmp_path, filename, ids_minimal_types, _ = filled_ascii_datastore

    runner = CliRunner()
    result = runner.invoke(
        info,
        [
            str(tmp_path / filename),
            "--name=minimal/int_type",
            f"--xml_path={ids_minimal_types}",
        ],
    )
    assert result.exit_code == 0


@pytest.mark.skip(reason="Functionality is broken")
@pytest.mark.cli
def test_open_from_file(filled_ascii_datastore):
    tmp_path, filename, ids_minimal_types, _ = filled_ascii_datastore

    open_from_file(tmp_path / filename, xml_path=ids_minimal_types)


@pytest.mark.cli
def test_reopen_ids(filled_ascii_datastore):
    tmp_path, _, ids_minimal_types, worker_id = filled_ascii_datastore

    dbentry = open_dbentry(
        ASCII_BACKEND, "r", worker_id, tmp_path, xml_path=ids_minimal_types
    )
    minimal = dbentry.get("minimal")

    assert (
        minimal.ids_properties.version_put.access_layer_language
        == "imaspy " + imaspy.__version__
    )
