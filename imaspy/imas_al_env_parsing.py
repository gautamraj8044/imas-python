# This file is part of IMASPy.
# You should have received the IMASPy LICENSE file with this project.
def parse_AL_version_string(string):
    """Parses a AL_VERSION string

    Parses the AL_VERSION to IMASPy format. By convention, the
    AL_VERSION string is generated by git-describe and edited.
    In our case for patch versions 'symver', e.g. '4.8.2'. For
    development versions it is 'symver-steps_from_symver-gcommit', e.g.
    '4.8.2-2-g1fffb6bf'

    Args:
      - string: The AL_VERSION string.

    Returns:
      - al_symver: The symversion of the passed AL_VERSION
      - steps_from_version: Amount of steps the development version is from symver
      - al_commit: The exact commit of the passed string. Symver for release version.

    """

    if "-" in string:
        al_symver, micropatch = string.split("-", 1)
        steps_from_version, commitspec = micropatch.split("-", 2)
        al_commit = commitspec[1:]
    else:
        al_symver = string
        steps_from_version = "0"
        al_commit = al_symver
    return al_symver, steps_from_version, al_commit


def sanitise_AL_symver(al_symver):
    """Sanitizes a al_symver for use in packages"""
    return al_symver.replace(".", "_")


def build_AL_package_name(sanitised_AL_symver, al_commit):
    """Build the package name for AL Python packages"""
    return "imas._al_lowlevel"

    if "." in al_commit:
        # Release package
        return "al_{!s}._al_lowlevel".format(sanitised_AL_symver)
    else:
        # 'dev' or 'in-between' package
        return "al_{!s}_{!s}._al_lowlevel".format(sanitised_AL_symver, al_commit)
